from telebot import TeleBot
from telebot.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from database.db_manager import DatabaseManager
from services.user_service import UserService
from services.device_service import DeviceService
from services.payment_service import PaymentService
from services.support_service import SupportService
from services.qr_service import QRService
from utils.rate_limiter import RateLimiter
import io
from .menu_handler import MenuHandler
from config.settings import MESSAGE_TEMPLATES, SUPPORT_WELCOME_MESSAGE
import logging
import qrcode
from datetime import datetime, timedelta, timezone
from config.settings import DEFAULT_PLAN_PRICE
from database.models import Device
import json
from config.settings import MARZBAN_HOST, MARZBAN_USERNAME, MARZBAN_PASSWORD
from services.marzban_service import MarzbanService

logger = logging.getLogger('callback_handler')


class CallbackHandler:
    # In callback_handler.py
    def __init__(self, bot: TeleBot, db_manager: DatabaseManager, qr_service: QRService = None,
                 rate_limiter: RateLimiter = None):
        self.bot = bot
        self.db_manager = db_manager
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MarzbanService
        self.marzban_service = MarzbanService(
            host=MARZBAN_HOST,
            username=MARZBAN_USERNAME,
            password=MARZBAN_PASSWORD
        )
        # –ü–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ DeviceService
        self.device_service = DeviceService(
            db_manager=self.db_manager,
            marzban_service=self.marzban_service,
            bot=self.bot
        )
        self.qr_service = qr_service or QRService()
        self.rate_limiter = rate_limiter or RateLimiter()
        self.user_service = UserService(db_manager)
        self.payment_service = PaymentService(db_manager)
        self.support_service = SupportService(bot, db_manager)
        self.menu_handler = MenuHandler()
        self.user_states = {}

    def register_handlers(self):
        """Register callback query handlers."""
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)
        self.bot.message_handler(
            func=lambda message: self.support_service.is_waiting_for_message(message.from_user.id)
        )(self.handle_support_message)

    def handle_callback(self, call: CallbackQuery):
        """Route callback queries to appropriate handlers."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
            user = self.db_manager.get_user(call.from_user.id)
            if not user:
                self.bot.answer_callback_query(call.id, "–ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
                return

            if not user.agreement_accepted and call.data != 'accept_agreement':
                agreement_text = (
                    "üìú *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*\n\n"
                    "–ü–æ–ª—å–∑—É—è—Å—å –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –£—Å–ª–æ–≤–∏—è–º–∏ "
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
                    "–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ "
                    "–ø–æ —Å—Å—ã–ª–∫–µ: [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](https://telegra.ph/Polzovatelskoe-soglashenie-11-16-9)"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
                )
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=agreement_text,
                    parse_mode='Markdown',
                    reply_markup=self.menu_handler.create_agreement_menu()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
            can_continue, message = self.rate_limiter.add_click(call.from_user.id)
            if not can_continue:
                self.bot.answer_callback_query(call.id, message)
                return

            if message:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                self.bot.answer_callback_query(call.id, message)

            handlers = {
                'accept_agreement': self.handle_agreement_acceptance,
                'update': self.handle_update,
                'my_devices': self.handle_devices,
                'top_up': self.handle_top_up,
                'help': self.handle_help,
                'back_to_menu': self.handle_back_to_menu,
                'add_device': self.handle_add_device,
                'start_support': self.handle_start_support,
                'referral': self.handle_referral,
                'custom_amount': self.handle_custom_amount,
                'payment_history': self.handle_payment_history,
                'cancel_input': self.handle_cancel_input,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
            }

            if call.data in handlers:
                handlers[call.data](call)
            elif call.data.startswith('top_up_'):
                self.handle_top_up_amount(call)
            elif call.data.startswith('select_device_'):
                self.handle_select_device(call)
            elif call.data.startswith('show_config_'):
                self.handle_show_config(call)

        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_cancel_input(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã."""
        try:
            user_id = call.from_user.id
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if user_id in self.user_states:
                del self.user_states[user_id]

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=MESSAGE_TEMPLATES['top_up_info'],
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_top_up_menu()
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"Error handling cancel input: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_custom_amount(self, call: CallbackQuery):
        """Handle custom amount top up."""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.clear_step_handler_by_chat_id(call.message.chat.id)

            msg = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 10000 —Ä—É–±):"
            sent_msg = self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=msg,
                reply_markup=self.menu_handler.create_cancel_menu()
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            self.bot.register_next_step_handler(sent_msg, self.process_custom_amount)

        except Exception as e:
            logger.error(f"Error handling custom amount: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def process_custom_amount(self, message: Message):
        """Process custom amount message."""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.bot.clear_step_handler_by_chat_id(message.chat.id)

            user_id = message.from_user.id

            try:
                amount = float(message.text.replace(',', '.'))
                if 10 <= amount <= 10000:
                    if not hasattr(self, 'user_states'):
                        self.user_states = {}

                    self.user_states[user_id] = {'action': 'waiting_email', 'amount': amount}

                    msg = ("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞.\n"
                           "‚ùóÔ∏è Email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")

                    sent_msg = self.bot.send_message(
                        message.chat.id,
                        msg,
                        reply_markup=self.menu_handler.create_cancel_menu()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
                    )

                    self.bot.register_next_step_handler(sent_msg, self.process_email_input)
                else:
                    self.bot.reply_to(
                        message,
                        "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 10000 —Ä—É–±.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=self.menu_handler.create_cancel_menu()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
                    )
            except ValueError:
                self.bot.reply_to(
                    message,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º.",
                    reply_markup=self.menu_handler.create_cancel_menu()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
                )

        except Exception as e:
            logger.error(f"Error processing custom amount: {e}", exc_info=True)
            self.bot.reply_to(
                message,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_payment_history(self, call: CallbackQuery):
        """Handle payment history button press."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = self.db_manager.get_user_transactions(call.from_user.id)

            if not transactions:
                text = "*üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
            else:
                text = "*üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π*\n\n"
                for tx in transactions:
                    date = tx['created_at']
                    if isinstance(date, str):
                        date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S")
                    date_str = date.strftime("%d.%m.%Y %H:%M")
                    text += (
                        f"‚úÖ {date_str}\n"
                        f"‚îî –°—É–º–º–∞: {tx['amount']:.2f}‚ÇΩ\n\n"
                    )

            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_back_to_menu()
            )

        except Exception as e:
            logger.error(f"Error showing payment history: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_payment_history(self, call: CallbackQuery):
        """Handle payment history button press."""
        try:
            transactions = self.db_manager.get_user_transactions(call.from_user.id)

            if not transactions:
                text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
            else:
                text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n\n"
                for tx in transactions:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                        created_at = tx['created_at']
                        if isinstance(created_at, str):
                            try:
                                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                                for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%dT%H:%M:%S", "%Y-%m-%d"]:
                                    try:
                                        date_obj = datetime.strptime(created_at, fmt)
                                        created_at = date_obj.strftime("%d.%m.%Y %H:%M")
                                        break
                                    except ValueError:
                                        continue
                            except Exception:
                                created_at = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

                        amount = float(tx['amount'])
                        text += f"‚úÖ {created_at}\n‚îî –°—É–º–º–∞: {amount:.2f}‚ÇΩ\n\n"

                    except Exception as e:
                        logger.error(f"Error formatting transaction: {e}")
                        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É
                        try:
                            amount = float(tx['amount'])
                            text += f"‚úÖ –°—É–º–º–∞: {amount:.2f}‚ÇΩ\n\n"
                        except:
                            text += "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=self.menu_handler.create_back_to_menu()
            )

        except Exception as e:
            logger.error(f"Error showing payment history: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

        except Exception as e:
            logger.error(f"Error showing payment history: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_update(self, call: CallbackQuery):
        """Handle update button press."""
        try:
            user_info = self.user_service.get_user_info(call.from_user.id)
            text = MESSAGE_TEMPLATES['welcome'].format(**user_info)

            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_main_menu()
            )
        except Exception as e:
            if "message is not modified" in str(e):
                self.bot.answer_callback_query(call.id, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            else:
                logger.error(f"Error updating main menu: {e}")
                self.bot.answer_callback_query(
                    call.id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

    def handle_devices(self, call: CallbackQuery):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            devices = self.device_service.get_user_devices(call.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
            active_devices = []
            for device in devices:
                marzban_config = self.device_service.marzban.get_user_config(device.marzban_username)
                if marzban_config:  # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Marzban
                    active_devices.append(device)
                else:  # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Marzban
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î
                    self.db_manager.deactivate_device(device.id)

            message_text = (
                "*üì± –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤*\n\n"
                "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.\n\n"
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ, –æ–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ! "
                "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ!\n\n"
                "_(–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VPN –Ω–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\")_"
            )

            keyboard = InlineKeyboardMarkup()

            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for device in devices:
                keyboard.add(InlineKeyboardButton(
                    f"üì± {device.marzban_username}",
                    callback_data=f"show_config_{device.id}"
                ))

            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="add_device"))
            keyboard.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu"))

            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=message_text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    self.bot.delete_message(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id
                    )
                except:
                    pass

                self.bot.send_message(
                    call.message.chat.id,
                    text=message_text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )

        except Exception as e:
            logger.error(f"Error handling devices menu: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_show_config(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
        try:
            device_id = int(call.data.split('_')[2])
            device = self.db_manager.get_device_by_id(device_id)

            if not device:
                return self.bot.answer_callback_query(call.id, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            marzban_config = self.device_service.marzban.get_user_config(device.marzban_username)
            if not marzban_config:
                return self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            vless_link = marzban_config.get('links', [])[0] if marzban_config.get('links') else ''

            info_text = (
                "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{device.telegram_id}`\n"
                f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.device_type}\n"
                f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {device.created_at}\n"
                f"‚åõ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {device.expires_at}\n"
                f"üåç –°—Ç—Ä–∞–Ω–∞: üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è\n"
                f"üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: Vless\n\n"
                "*–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n"
                f"`{vless_link}`\n\n"
                "üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ"
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
            qr.add_data(vless_link)
            qr.make(fit=True)
            qr_buffer = io.BytesIO()
            qr.make_image().save(qr_buffer, format='PNG')
            qr_buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self.bot.send_photo(
                call.message.chat.id,
                qr_buffer,
                caption=info_text,
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_my_devices_button()
            )

        except Exception as e:
            logger.error(f"Error showing config: {e}")
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    def handle_top_up(self, call: CallbackQuery):
        """Handle top up button press."""
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=MESSAGE_TEMPLATES['top_up_info'],
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_top_up_menu()
            )
        except Exception as e:
            logger.error(f"Error showing top up menu: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_help(self, call: CallbackQuery):
        """Handle help button press."""
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=MESSAGE_TEMPLATES['help'],
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_help_menu()
            )
        except Exception as e:
            logger.error(f"Error showing help menu: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_back_to_menu(self, call: CallbackQuery):
        """Handle back to menu button press."""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
            self.support_service.cancel_support_dialog(call.from_user.id)
            self.handle_update(call)
        except Exception as e:
            logger.error(f"Error returning to main menu: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_add_device(self, call: CallbackQuery):
        """Handle add device button press."""
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*",
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_device_types_menu()
            )
        except Exception as e:
            logger.error(f"Error showing device types menu: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_top_up_amount(self, call: CallbackQuery):
        """Handle top up amount selection."""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.bot.clear_step_handler_by_chat_id(call.message.chat.id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            amount = float(call.data.split('_')[2])
            self.user_states[call.from_user.id] = {'action': 'waiting_email', 'amount': amount}

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
            msg = ("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞.\n"
                   "‚ùóÔ∏è Email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")

            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=msg,
                reply_markup=self.menu_handler.create_cancel_menu()  # –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ create_cancel_menu
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.register_next_step_handler(call.message, self.process_email_input)

        except Exception as e:
            logger.error(f"Error handling top up amount: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def process_email_input(self, message: Message):
        """Process email input for payment."""
        try:
            user_id = message.from_user.id
            if user_id not in self.user_states:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–æ–≤–æ.")
                return

            email = message.text.strip().lower()
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
            if '@' not in email or '.' not in email:
                self.bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email.")
                self.bot.register_next_step_handler(message, self.process_email_input)
                return

            amount = self.user_states[user_id]['amount']

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_data = self.payment_service.create_payment_link(
                telegram_id=user_id,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å user_id –Ω–∞ telegram_id
                amount=amount,
                email=email
            )

            if payment_data and payment_data['success']:
                payment_message = (
                    "üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
                    f"–°—É–º–º–∞: *{amount}* —Ä—É–±.\n"
                    f"Email –¥–ª—è —á–µ–∫–∞: {email}\n"
                    "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá"
                )

                keyboard = InlineKeyboardMarkup()
                keyboard.add(
                    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['payment_url'])
                )
                keyboard.add(
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                )

                self.bot.send_message(
                    message.chat.id,
                    payment_message,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            else:
                self.bot.reply_to(
                    message,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_states[user_id]

        except Exception as e:
            logger.error(f"Error processing email input: {e}")
            self.bot.reply_to(
                message,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_select_device(self, call: CallbackQuery):
        """Handle device type selection."""
        try:
            device_type = call.data.split('_')[2]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if not hasattr(self, 'user_states'):
                self.user_states = {}

            self.user_states[call.from_user.id] = {
                'device_type': device_type,
                'action': 'waiting_days'
            }

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            msg = self.menu_handler.create_device_selection_message()

            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=msg,
                reply_markup=self.menu_handler.create_cancel_menu_devices()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.register_next_step_handler(call.message, self.process_days_selection)

        except Exception as e:
            logger.error(f"Error handling device selection: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def process_days_selection(self, message: Message):
        try:
            user_id = message.from_user.id
            if user_id not in self.user_states:
                return

            days = int(message.text)
            if not (1 <= days <= 30):
                self.bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å
            total_cost = DEFAULT_PLAN_PRICE * days
            user = self.db_manager.get_user(user_id)
            if user.balance < total_cost:
                insufficient_balance_text = (
                    "‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ {days} –¥–Ω–µ–π: *{total_cost}* —Ä—É–±.\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{user.balance}* —Ä—É–±.\n\n"
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞: *{total_cost - user.balance}* —Ä—É–±."
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
                if user_id in self.user_states:
                    del self.user_states[user_id]

                self.bot.reply_to(
                    message,
                    insufficient_balance_text,
                    parse_mode='Markdown',
                    reply_markup=self.menu_handler.create_back_to_menu()
                )
                return

            device = self.device_service.add_device(
                telegram_id=user_id,
                device_type=self.user_states[user_id]['device_type'],
                days=days
            )

            if device:
                marzban_config = self.device_service.marzban.get_user_config(device.marzban_username)
                vless_link = marzban_config.get('links', [])[0] if marzban_config and marzban_config.get(
                    'links') else ''

                config_message = (
                    "‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                    "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{device.telegram_id}`\n"
                    f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.device_type}\n"
                    f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {device.created_at}\n"
                    f"‚åõ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {device.expires_at}\n"
                    f"üåç –°—Ç—Ä–∞–Ω–∞: üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è\n"
                    f"üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: Vless\n\n"
                    "*–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n"
                    f"`{vless_link}`\n\n"
                    "üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤—ã—à–µ"
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
                qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
                qr.add_data(vless_link)
                qr.make(fit=True)
                qr_buffer = io.BytesIO()
                qr.make_image().save(qr_buffer, format='PNG')
                qr_buffer.seek(0)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º
                self.bot.send_photo(
                    message.chat.id,
                    qr_buffer,
                    caption=config_message,
                    parse_mode='Markdown',
                    reply_markup=self.menu_handler.create_my_devices_button()
                )

        except ValueError:
            self.bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")
        except Exception as e:
            logger.error(f"Error processing days selection: {e}")
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            if user_id in self.user_states:
                del self.user_states[user_id]

    def handle_device_info(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
        try:
            device_id = int(call.data.split('_')[2])
            device = self.db_manager.get_device_by_id(device_id)

            if not device:
                self.bot.answer_callback_query(
                    call.id,
                    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                )
                return

            status = self.device_service.get_device_status(device)

            info_text = (
                f"üì± *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ*\n\n"
                f"–¢–∏–ø: {device.device_type}\n"
                f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if status['status'] == 'active' else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {status['upload']}\n"
                f"–°–∫–∞—á–∞–Ω–æ: {status['download']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {status['last_used']}\n"
                f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {status['expires']}\n"
            )

            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"refresh_config_{device_id}"),
                InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_device_{device_id}")
            )
            keyboard.row(
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_device_{device_id}"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_devices")
            )

            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=info_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )

        except Exception as e:
            self.logger.error(f"Error handling device info: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def handle_refresh_config(self, call: CallbackQuery):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            device_id = int(call.data.split('_')[2])
            device = self.db_manager.get_device_by_id(device_id)

            if not device:
                self.bot.answer_callback_query(call.id, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ Marzban
            new_config = self.marzban.get_user_config(device.marzban_username)
            if not new_config:
                self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î
            device.config_data = json.dumps(new_config)
            self.db_manager.update_device_config(device.id, device.config_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            config_file = self.device_service.save_config_file(
                device.config_data,
                device.device_type
            )

            if config_file:
                with open(config_file, 'rb') as config:
                    self.bot.send_document(
                        call.message.chat.id,
                        config,
                        caption="üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
                    )
                self.device_service.cleanup_config_file(config_file)

            self.bot.answer_callback_query(call.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            logger.error(f"Error refreshing config: {e}")
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    def handle_delete_device(self, call: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            device_id = int(call.data.split('_')[2])
            device = self.db_manager.get_device_by_id(device_id)

            if not device:
                self.bot.answer_callback_query(call.id, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban
            if self.marzban.delete_user(device.marzban_username):
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î
                self.db_manager.deactivate_device(device.id)

                self.bot.answer_callback_query(call.id, "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                self.handle_devices(call)
            else:
                self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

        except Exception as e:
            logger.error(f"Error deleting device: {e}")
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    def handle_referral(self, call: CallbackQuery):
        try:
            user_id = call.from_user.id
            bot_username = "VangVPN_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            ref_link = f"https://t.me/{bot_username}?start=ref{user_id}"

            stats = self.db_manager.get_referral_stats(user_id)

            text = (
                "ü§ù *–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê*\n\n"
                "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:\n"
                "‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ Trial –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 2 –¥–Ω—è\n"
                "‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç Trial –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 1 –¥–µ–Ω—å\n\n"
                "‚¨áÔ∏è *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):*\n"
                f"`{ref_link}`\n\n"
                "üèÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"‚îú –ü—Ä–∏–≤–µ–¥–µ–Ω–æ –¥—Ä—É–∑–µ–π: `{stats['referrals_count']}`\n"
                f"‚îî –ü–æ–ª—É—á–µ–Ω–æ Trial –∫–æ–Ω—Ñ–∏–≥–æ–≤: `{stats['referrals_count']}`\n\n"
                "*–£—Å–ª–æ–≤–∏—è:*\n"
                "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É\n"
                "2. –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "3. –í—ã –∏ –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç–µ Trial –∫–æ–Ω—Ñ–∏–≥–∏!"
            )

            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_back_to_menu()
            )

        except Exception as e:
            logger.error(f"Error handling referral menu: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_support_message(self, message: Message):
        """Handle user message in support mode."""
        try:
            logger.info(f"Processing support message from user {message.from_user.id}")
            self.support_service.forward_to_support(message)
        except Exception as e:
            logger.error(f"Error handling support message: {e}")
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def handle_start_support(self, call: CallbackQuery):
        """Start support dialog."""
        try:
            user_id = call.from_user.id
            logger.info(f"Starting support dialog for user {user_id}")

            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            self.support_service.start_support_dialog(user_id)

            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=SUPPORT_WELCOME_MESSAGE,
                reply_markup=self.menu_handler.create_back_to_menu()
            )
            self.bot.answer_callback_query(call.id)

        except Exception as e:
            logger.error(f"Error starting support dialog: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def handle_agreement_acceptance(self, call: CallbackQuery):
        """Handle agreement acceptance."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            user = self.db_manager.get_user(call.from_user.id)
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
                self.db_manager.update_agreement_status(call.from_user.id, True)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
                user_info = self.user_service.get_user_info(call.from_user.id)
                text = MESSAGE_TEMPLATES['welcome'].format(**user_info)

                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=text,
                    parse_mode='Markdown',
                    reply_markup=self.menu_handler.create_main_menu()
                )

                self.bot.answer_callback_query(
                    call.id,
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è!"
                )
        except Exception as e:
            logger.error(f"Error handling agreement acceptance: {e}")
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )