from telebot import TeleBot
from telebot.types import Message
from database.db_manager import DatabaseManager
from services.user_service import UserService
from services.payment_service import PaymentService
from services.support_service import SupportService
from .menu_handler import MenuHandler
from config.settings import MESSAGE_TEMPLATES, SUPPORT_GROUP_ID
import logging
from time import time
from collections import defaultdict

logger = logging.getLogger('command_handler')


class CommandRateLimit:
    def __init__(self):
        self.user_commands = defaultdict(list)
        self.time_window = 60  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        self.max_commands = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ time_window
        self.blocked_users = {}  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.block_duration = 300  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

    def _cleanup_old_commands(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥."""
        current_time = time()
        self.user_commands[user_id] = [
            cmd_time for cmd_time in self.user_commands[user_id]
            if current_time - cmd_time < self.time_window
        ]

    def is_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        if user_id not in self.blocked_users:
            return False

        if time() - self.blocked_users[user_id] > self.block_duration:
            del self.blocked_users[user_id]
            return False

        return True

    def can_execute(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if self.is_blocked(user_id):
            remaining_time = int(self.block_duration - (time() - self.blocked_users[user_id]))
            return False, f"‚õîÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
        self._cleanup_old_commands(user_id)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        current_time = time()
        self.user_commands[user_id].append(current_time)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥
        if len(self.user_commands[user_id]) > self.max_commands:
            self.blocked_users[user_id] = current_time
            self.user_commands[user_id].clear()
            return False, "‚õîÔ∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç."

        return True, ""


class CommandHandler:
    def __init__(self, bot: TeleBot, db_manager: DatabaseManager):
        self.bot = bot
        self.db_manager = db_manager
        self.user_service = UserService(db_manager)
        self.payment_service = PaymentService(db_manager)
        self.support_service = SupportService(bot, db_manager)
        self.menu_handler = MenuHandler()
        self.rate_limiter = CommandRateLimit()

    def register_handlers(self):
        """Register command handlers."""
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['help'])(self.handle_help)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.bot.message_handler(
            func=lambda message: message.chat.id == SUPPORT_GROUP_ID and message.reply_to_message
        )(self.handle_support_reply)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.bot.message_handler(
            func=lambda message: self.support_service.is_waiting_for_message(message.from_user.id)
        )(self.handle_user_support_message)

    def handle_start(self, message: Message):
        try:
            user_id = message.from_user.id
            args = message.text.split()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            can_execute, error_message = self.rate_limiter.can_execute(user_id)
            if not can_execute:
                self.bot.reply_to(message, error_message)
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.user_service.get_or_create_user(message.from_user)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            if len(args) > 1 and args[1].startswith('ref'):
                try:
                    referrer_telegram_id = int(args[1].replace('ref', ''))
                    logger.info(f"Referral link from {referrer_telegram_id} to {user_id}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    referrer = self.db_manager.get_user(referrer_telegram_id)
                    if referrer:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ —Ç–∞–±–ª–∏—Ü—É referrals
                        success = self.db_manager.add_referral(
                            referrer_telegram_id=referrer_telegram_id,
                            referee_telegram_id=user_id
                        )
                        logger.info(f"Added referral link: {success}")
                        if success:
                            self.bot.send_message(
                                referrer_telegram_id,
                                f"üë• –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É!"
                            )
                except Exception as e:
                    logger.error(f"Error processing referral: {e}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
            if not user or not user.agreement_accepted:
                agreement_text = (
                    "üìú *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*\n\n"
                    "–ü–æ–ª—å–∑—É—è—Å—å –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –£—Å–ª–æ–≤–∏—è–º–∏ "
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
                    "–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ "
                    "–ø–æ —Å—Å—ã–ª–∫–µ: [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](https://telegra.ph/Polzovatelskoe-soglashenie-11-16-9)"
                )
                self.bot.send_message(
                    message.chat.id,
                    agreement_text,
                    parse_mode='Markdown',
                    disable_web_page_preview=True,
                    reply_markup=self.menu_handler.create_agreement_menu()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã (deep linking)
            if len(args) > 1 and args[1].startswith('payment_'):
                transactions = self.db_manager.get_pending_transactions(user_id)
                if transactions:
                    latest_transaction = transactions[0]
                    payment_status = self.payment_service.check_payment_status(latest_transaction.payment_id)
                    if payment_status and payment_status.get('paid'):
                        success_message = (
                            "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
                            f"**–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ÆKassa**\n\n"
                            f"**Payment ID: {latest_transaction.payment_id}**\n\n"
                            f"**–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {latest_transaction.amount:.2f} —Ä—É–±**\n"
                        )
                        user_info = self.user_service.get_user_info(user_id)
                        success_message += f"**–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info['balance']:.2f} —Ä—É–±**"
                        self.bot.reply_to(message, success_message, parse_mode='Markdown')
                    else:
                        self.bot.reply_to(
                            message,
                            "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂."
                        )
                else:
                    logger.warning(f"No pending transactions found for user {user_id}")
                    self.bot.reply_to(
                        message,
                        "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂."
                    )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            user_info = self.user_service.get_user_info(user.telegram_id)
            text = MESSAGE_TEMPLATES['welcome'].format(**user_info)
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_main_menu()
            )

        except Exception as e:
            logger.error(f"Error handling start command: {e}", exc_info=True)
            self.bot.reply_to(
                message,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def handle_help(self, message: Message):
        """Handle /help command."""
        try:
            can_execute, error_message = self.rate_limiter.can_execute(message.from_user.id)
            if not can_execute:
                self.bot.reply_to(message, error_message)
                return

            self.bot.send_message(
                message.chat.id,
                MESSAGE_TEMPLATES['help'],
                parse_mode='Markdown',
                reply_markup=self.menu_handler.create_help_menu()
            )
        except Exception as e:
            logger.error(f"Error handling help command: {e}")
            self.bot.reply_to(
                message,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def handle_support_reply(self, message: Message):
        """Handle reply from support channel."""
        try:
            self.support_service.handle_support_reply(message)
        except Exception as e:
            logger.error(f"Error handling support reply: {e}")
            self.bot.reply_to(
                message,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞."
            )

    def handle_user_support_message(self, message: Message):
        """Handle message from user in support mode."""
        try:
            can_execute, error_message = self.rate_limiter.can_execute(message.from_user.id)
            if not can_execute:
                self.bot.reply_to(message, error_message)
                return

            self.support_service.forward_to_support(message)
        except Exception as e:
            logger.error(f"Error handling support message: {e}")
            self.bot.reply_to(
                message,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )