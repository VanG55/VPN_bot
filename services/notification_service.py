from telebot import TeleBot
from database.db_manager import DatabaseManager
from config.settings import DEFAULT_PLAN_PRICE
import logging
from datetime import datetime, timedelta
import threading
import time
import schedule

logger = logging.getLogger('notifications')


class NotificationService:
    def __init__(self, bot: TeleBot, db_manager: DatabaseManager):
        self.bot = bot
        self.db_manager = db_manager
        self._scheduler_thread = None
        self._stop_flag = threading.Event()
        self.notification_thresholds = {
            1: "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
        }

    # notification_service.py
    def check_user_devices_and_balance(self, user_id: int) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞—Ç—ã."""
        try:
            user = self.db_manager.get_user(user_id)
            if not user:
                return

            devices = self.db_manager.get_user_devices(user_id)
            if not devices:
                return

            # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –¥–µ–Ω—å
            daily_cost = len(devices) * DEFAULT_PLAN_PRICE

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
            if user.balance < daily_cost:
                self.db_manager.deactivate_user_devices(user_id)
                notification = (
                    "‚ùå *–í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã*\n\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:.2f} —Ä—É–±.\n"
                    f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: {daily_cost} —Ä—É–±/–¥–µ–Ω—å\n\n"
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )
                self.bot.send_message(user_id, notification, parse_mode='Markdown')
                return

            # –°–ø–∏—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–ª–∞—Ç—É
            self.db_manager.update_balance(user_id, -daily_cost)

            # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
            days_left = user.balance / daily_cost

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 –¥–Ω–µ–π
            if days_left < 2:
                notification = (
                    "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É*\n\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} —Ä—É–±.\n"
                    f"üì± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}\n"
                    f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–µ–Ω—å: {daily_cost} —Ä—É–±.\n"
                    f"‚è≥ –•–≤–∞—Ç–∏—Ç –Ω–∞ {days_left:.1f} –¥–Ω–µ–π\n\n"
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!"
                )
                self.bot.send_message(user_id, notification, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"Error checking devices for user {user_id}: {e}", exc_info=True)

    def check_all_users_devices_and_balance(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            with self.db_manager.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT telegram_id FROM users")
                users = cursor.fetchall()

                for user in users:
                    try:
                        self.check_user_devices_and_balance(user['telegram_id'])
                    except Exception as e:
                        logger.error(f"Error checking user {user['telegram_id']}: {e}")

        except Exception as e:
            logger.error(f"Error checking all users: {e}")

    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        schedule.every().day.at("00:01").do(self.check_all_users_devices_and_balance)

        while not self._stop_flag.is_set():
            schedule.run_pending()
            time.sleep(60)

    def schedule_balance_checks(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–∞–ª–∞–Ω—Å–∞."""
        if self._scheduler_thread is None or not self._scheduler_thread.is_alive():
            self._stop_flag.clear()
            self._scheduler_thread = threading.Thread(
                target=self._scheduler_loop,
                name="BalanceChecker",
                daemon=True
            )
            self._scheduler_thread.start()
            logger.info("Balance check scheduler started")

    def stop_scheduler(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if self._scheduler_thread and self._scheduler_thread.is_alive():
            self._stop_flag.set()
            self._scheduler_thread.join(timeout=5)
            logger.info("Balance check scheduler stopped")