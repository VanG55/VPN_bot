import os
import json
import qrcode
from qrcode.constants import ERROR_CORRECT_L
import io
from typing import List, Optional, Dict, Any, Tuple
from datetime import datetime, timedelta
from database.models import Device
from database.db_manager import DatabaseManager
from config.settings import (
    DEFAULT_PLAN_PRICE,
    MARZBAN_PROTOCOLS
)
from services.marzban_service import MarzbanService
from telebot import TeleBot
import logging
logger = logging.getLogger('device_service')

class DeviceService:
    def __init__(self, db_manager: DatabaseManager, marzban_service: MarzbanService, bot: TeleBot):
        self.db_manager = db_manager
        self.marzban = marzban_service
        self.bot = bot  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        self.logger = logging.getLogger('device_service')

    def format_device_info(self, device: Device) -> Tuple[str, Optional[io.BytesIO]]:
        try:
            marzban_config = self.marzban.get_user_config(device.marzban_username)
            if not marzban_config:
                return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", None

            links = marzban_config.get('links', [])
            vless_link = next((link for link in links if link.startswith('vless://')), '')

            info_text = f"""
    ‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{device.telegram_id}`
    üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.device_type}
    üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {device.created_at}
    ‚åõ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {device.expires_at}
    üåç –°—Ç—Ä–∞–Ω–∞: üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è
    üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: Vless

    1Ô∏è‚É£ *–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é*
    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚¨áÔ∏è
    `{device.marzban_username}`

    2Ô∏è‚É£ *–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*
    `{vless_link}`
    """

            qr = qrcode.QRCode(
                version=1,
                error_correction=ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(vless_link)
            qr.make(fit=True)

            qr_buffer = io.BytesIO()
            qr.make_image(fill_color="black", back_color="white").save(qr_buffer, "PNG")
            qr_buffer.seek(0)

            return info_text, qr_buffer

        except Exception as e:
            self.logger.error(f"Error formatting device info: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", None

    def add_device(self, telegram_id: int, device_type: str, days: int = 30) -> Optional[Device]:
        try:
            if not self.can_add_device(telegram_id):
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
            total_cost = DEFAULT_PLAN_PRICE * days  # –°—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ –¥–Ω–∏
            user = self.db_manager.get_user(telegram_id)

            if not user or user.balance < total_cost:
                self.logger.info(f"Insufficient balance: required {total_cost}, available {user.balance if user else 0}")
                return None

            marzban_username = f"vless_{device_type.lower()}_{int(datetime.now().timestamp())}"
            self.logger.info(f"Creating Marzban user: {marzban_username}")

            marzban_user = self.marzban.create_user(marzban_username, days)
            if not marzban_user:
                return None

            device = Device(
                telegram_id=telegram_id,
                device_type=device_type,
                config_data=json.dumps(marzban_user),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Marzban
                created_at=datetime.now(),
                expires_at=datetime.now() + timedelta(days=days),
                marzban_username=marzban_username  # –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ
            )

            device_id = self.db_manager.add_device(device)
            if device_id:
                # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ –¥–Ω–∏
                self.db_manager.update_balance(telegram_id, -total_cost)
                device.id = device_id
                return device

            return None

        except Exception as e:
            self.logger.error(f"Error adding device: {e}")
            return None

    def get_device_status(self, device: Device) -> Dict[str, Any]:
        """Get device status and usage info."""
        try:
            # –ï—Å–ª–∏ expires_at —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é
            if isinstance(device.expires_at, str):
                expires = device.expires_at
            else:
                expires = device.expires_at.strftime("%d.%m.%Y %H:%M:%S") if device.expires_at else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'

            # –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è created_at
            if isinstance(device.created_at, str):
                created = device.created_at
            else:
                created = device.created_at.strftime("%d.%m.%Y %H:%M:%S") if device.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

            return {
                'status': 'active' if device.is_active else 'inactive',
                'created': created,
                'expires': expires
            }

        except Exception as e:
            self.logger.error(f"Error getting device status: {e}")
            return {
                'status': 'error',
                'created': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'expires': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }

        except Exception as e:
            self.logger.error(f"Error getting device status: {e}")
            return {
                'status': 'error',
                'created': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'expires': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }

    def get_user_devices(self, telegram_id: int) -> List[Device]:
        """Get all active devices for user."""
        return self.db_manager.get_user_devices(telegram_id)

    def save_config_file(self, config_data: str, device_type: str) -> str:
        """Save config to temporary file."""
        try:
            configs = json.loads(config_data)
            formatted_text = self.format_config_for_device(configs, device_type)

            filename = f"{device_type}_config_{datetime.now().timestamp()}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(formatted_text)
            return filename
        except Exception as e:
            self.logger.error(f"Error saving config file: {e}")
            return ""

    def can_add_device(self, telegram_id: int) -> bool:
        """Check if user can add new device."""
        try:
            user = self.db_manager.get_user(telegram_id)
            return user and user.balance >= DEFAULT_PLAN_PRICE
        except Exception as e:
            self.logger.error(f"Error checking if user can add device: {e}")
            return False

    def get_user_status(self, username: str) -> bool:
        try:
            user_config = self.marzban.get_user_config(username)
            return user_config and user_config.get('status') == 'active'
        except Exception as e:
            logger.error(f"Error checking user status: {e}")
            return False

    def check_deactivated_configs(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_devices = self.db_manager.get_all_active_devices()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å
            for device in active_devices:
                if not self.get_user_status(device.marzban_username):
                    self.permanently_delete_config(device.marzban_username)
                    logger.info(f"Config {device.marzban_username} was deactivated by v2iplimit and removed")
        except Exception as e:
            logger.error(f"Error checking deactivated configs: {e}")



    def format_config_for_device(self, configs: dict, device_type: str) -> str:
        """Format Marzban config for specific device type."""
        try:
            formatted_text = f"=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {device_type} ===\n\n"
            available_protocols = MARZBAN_PROTOCOLS.get(device_type, {})

            for protocol, config in configs['proxies'].items():
                if available_protocols.get(protocol, False) and 'uri' in config:
                    formatted_text += f"--- {protocol.upper()} ---\n"
                    formatted_text += f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{config['uri']}\n\n"

            if formatted_text == f"=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {device_type} ===\n\n":
                return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"

            return formatted_text

        except Exception as e:
            self.logger.error(f"Error formatting config: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

    def cleanup_config_file(self, filename: str) -> None:
        """Remove temporary config file."""
        try:
            if filename and os.path.exists(filename):
                os.remove(filename)
        except Exception as e:
            self.logger.error(f"Error removing config file: {e}")

    def permanently_delete_config(self, username: str):
        try:
            device = self.db_manager.get_device_by_marzban_username(username)
            if not device:
                logger.warning(f"Device not found: {username}")
                return

            # –£–¥–∞–ª—è–µ–º –∏–∑ Marzban
            if self.marzban.delete_user(username):
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î
                self.db_manager.deactivate_device(device.id)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = (
                    "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*\n\n"
                    "–í–∞—à VPN –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "
                    "—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
                    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
                )

                self.bot.send_message(
                    device.telegram_id,
                    message,
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"Error permanently deleting config: {e}")